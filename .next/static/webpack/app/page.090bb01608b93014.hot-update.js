"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/hooks/useChat.ts":
/*!******************************!*\
  !*** ./src/hooks/useChat.ts ***!
  \******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useChat: function() { return /* binding */ useChat; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _utils_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/utils/api */ \"(app-pages-browser)/./src/utils/api.ts\");\n\n\nconst useChat = ()=>{\n    const [chatState, setChatState] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({\n        messages: [],\n        isLoading: false,\n        error: null\n    });\n    const addMessage = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((message)=>{\n        const newMessage = {\n            ...message,\n            id: Date.now().toString(),\n            timestamp: new Date()\n        };\n        setChatState((prev)=>({\n                ...prev,\n                messages: [\n                    ...prev.messages,\n                    newMessage\n                ]\n            }));\n        return newMessage.id;\n    }, []);\n    const updateMessage = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((messageId, updates)=>{\n        setChatState((prev)=>({\n                ...prev,\n                messages: prev.messages.map((msg)=>msg.id === messageId ? {\n                        ...msg,\n                        ...updates\n                    } : msg)\n            }));\n    }, []);\n    const sendMessage = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (content, threadId)=>{\n        if (!content.trim() || chatState.isLoading) return;\n        setChatState((prev)=>({\n                ...prev,\n                isLoading: true,\n                error: null\n            }));\n        // Add user message\n        const userMessageId = addMessage({\n            role: \"user\",\n            content: content.trim()\n        });\n        // Add assistant message placeholder\n        const assistantMessageId = addMessage({\n            role: \"assistant\",\n            content: \"\",\n            isStreaming: true\n        });\n        try {\n            // Filter out error messages and only include valid conversation messages\n            const conversationHistory = chatState.messages.filter((msg)=>!msg.content.startsWith(\"Error:\") && msg.content.trim() !== \"\").map((msg)=>({\n                    role: msg.role,\n                    content: msg.content\n                }));\n            // Add the new user message to conversation history\n            conversationHistory.push({\n                role: \"user\",\n                content: content.trim()\n            });\n            const stream = await (0,_utils_api__WEBPACK_IMPORTED_MODULE_1__.sendMessageToWeatherAgent)(conversationHistory, threadId);\n            let accumulatedContent = \"\";\n            await (0,_utils_api__WEBPACK_IMPORTED_MODULE_1__.parseStreamingResponse)(stream, (contentChunk)=>{\n                accumulatedContent += contentChunk;\n                updateMessage(assistantMessageId, {\n                    content: accumulatedContent,\n                    isStreaming: true\n                });\n            }, ()=>{\n                updateMessage(assistantMessageId, {\n                    content: accumulatedContent,\n                    isStreaming: false\n                });\n                setChatState((prev)=>({\n                        ...prev,\n                        isLoading: false\n                    }));\n            }, (error)=>{\n                updateMessage(assistantMessageId, {\n                    content: \"Error: \".concat(error),\n                    isStreaming: false\n                });\n                setChatState((prev)=>({\n                        ...prev,\n                        isLoading: false,\n                        error\n                    }));\n            });\n        } catch (error) {\n            const errorMessage = error instanceof Error ? error.message : \"Failed to send message\";\n            updateMessage(assistantMessageId, {\n                content: \"Error: \".concat(errorMessage),\n                isStreaming: false\n            });\n            setChatState((prev)=>({\n                    ...prev,\n                    isLoading: false,\n                    error: errorMessage\n                }));\n        }\n    }, [\n        chatState.messages,\n        chatState.isLoading,\n        addMessage,\n        updateMessage\n    ]);\n    const clearChat = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        setChatState({\n            messages: [],\n            isLoading: false,\n            error: null\n        });\n    }, []);\n    const searchMessages = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((query)=>{\n        if (!query.trim()) return chatState.messages;\n        return chatState.messages.filter((message)=>message.content.toLowerCase().includes(query.toLowerCase()));\n    }, [\n        chatState.messages\n    ]);\n    return {\n        ...chatState,\n        sendMessage,\n        clearChat,\n        searchMessages,\n        addMessage,\n        updateMessage\n    };\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/hooks/useChat.ts\n"));

/***/ })

});